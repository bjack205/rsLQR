name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - gcc
          - clang
        linalg:
          - InternalRoutines
          - Eigen
          - BLAS

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: | 
        sudo apt-get install libeigen3-dev -y
        sudo apt-get install clang -y

    - name: Configure CMake
      run: |
        mkdir ${{github.workspace}}/build && cd build
        cmake -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
              -D CMAKE_C_COMPILER=${{matrix.compiler}} \
              -D CMAKE_CXX_COMPILER=${{matrix.compiler}} \
              -D RSLQR_LINALG_LIBRARY=${{matrix.linalg}} \
              -D RSLQR_RUN_FULL_TEST=0 \
              --log-context ..

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} .
      
  ccov:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: sudo apt-get install libeigen3-dev -y
    - name: Configure CMake
      run: |
        mkdir ${{github.workspace}}/build && cd build
        cmake -D CMAKE_BUILD_TYPE=Debug \
              -D RSLQR_CODE_COVERAGE=ON \
              -D RSLQR_RUN_FULL_TEST=OFF \
              --log-context ..
    - name: Build
      run: cmake --build ${{github.workspace}}/build
    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      run: ctest .
    - name: Process code coverage results
      run: gcov **/*.o
    - name: Upload Coverage to Codecov
      run: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports."

